--- 
wordpress_id: 272
layout: post
title: generating SVG charts with couchdb
date: 2009-12-08 14:28:43 +00:00
wordpress_url: http://caprazzi.net/posts/charting-data-with-couchdb/
---

In this article I describe how I got couchdb to produce SVG charts using [list functions](http://books.couchdb.org/relax/design-documents/lists "List functions chapter in The Definitive Guide")This post is long, so I'll report the results first:[![](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-1.thumb.png)](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-1.svg)**group_level=1**yearly averages[svg](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-1.svg) - [png](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-1.png)[![](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-2.thumb.png)](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-2.svg)**group_level=2**monthly averages[svg](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-2.svg) - [png](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-2.png)[![](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-3.thumb.png)](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-3.svg)**group_level=3**daily values[svg](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-3.svg) - [png](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-3.png)Â Now go and read how I did it:1. [generate some test data](#generate "generate some test data")
2. [upload test data to couchdb](#upload "upload test data to couchdb")
3. [create and manage a design document with couchapp](#couchapp "create and manage a design document with couchapp")
4. [write a simple view with map/reduce](#view "write a simple view with map/reduce")
5. [write a _list function and render the charts!](#list "write a _list function and render the charts!")
6. [Conclusions](#conculsions "conclusions")
_ [Apache CouchDB](http://couchdb.apache.org/) is a document-oriented database server, accessible via a RESTful JSON API. It has some advanced features, such as the ability to write 'views' in a map/reduce fashion and to further transform the results using javascript. It's a young but very promising project._## Try this at home
You can browse [browse](http://github.com/mcaprari/couchdb-charts-example) or  [download](http://github.com/mcaprari/couchdb-charts-example/zipball/master) all code discussed here. All comments and corrections are welcome.<>## Generate some test data
To get started with this exploration we need some data to render, and a quick way tovisualize it before our application is ready. This Python script generates a series of data pointsthat simulate the goings of someone's bank account.``# test_data.py. Usage: python test_data.py <simulation_length>import sysimport randomdays = int(sys.argv[1])savings = 10000pay = 2000for i in range(0, days):if ( i%30 == 0):savings = savings + paysavings = savings - random.randint(0, pay/16) - 2print i, (int(savings))``Use the script to generate a sample set with 3000 points:$ python test_data.py 3000 > test_data.txt$ cat test_data.txt0 119471 118822 11813...Our final output will be similar to a line chart made with some bash and _gnuplot_:``#!/bin/sh# gnuplot.sh generates a plot of a series piped in stdin(echo -e "set terminal png size 750, 500\nplot \"-\" using 1:2 with lines notitle"cat -echo -e "end") | gnuplot``$ cat test_data.txt | sh gnuplot.sh > [test_data.png](http://caprazzi.net/wp-content/uploads/2009/12/test_data.png)<>## Upload test data data to couchdb
We need our data in json format so that it can be uploaded to couchdb. This python scripts convertseach input line to a json object. Each object will become a document in couchdb. All lines are collected in the 'docs' array, to make the output compatible with [couchdb bulk document api.](http://wiki.apache.org/couchdb/HTTP_Bulk_Document_API) It also adds a tag to each document, so it's easier to upload and manage multiple datasets.``# data_to_json.py. builds json output suitable for couchdb bulk operationsimport sysimport datetimedate = datetime.datetime(2000, 01, 01)tag = sys.argv[1]print '{"docs":['for line in sys.stdin:day, value = line.strip().split(' ')datestr = (date + datetime.timedelta(int(day))).strftime("%Y-%m-%d")if (day <> "0"): print ","sys.stdout.write('{"tag":"%s", "date":"%s", "amount":%s}'%(tag, datestr, value)),print '\n]}',``$ cat test_data.txt | python data_to_json.py **test-data** > test_data.json$ cat test_data.json**{"docs":[**{**"tag":"test-data"**, "date":"2000-01-01", "amount":11896},{"tag":"test-data", "date":"2000-01-02", "amount":11876},....{"tag":"test-data", "date":"2008-03-17", "amount":18703},{"tag":"test-data", "date":"2008-03-18", "amount":18643}]}Create a new database with name svg-charts-demo$ curl -i -X PUT http://localhost:5984/svg-charts-demo/HTTP/1.1 201 Created...{"ok":true}Upload the test data$ curl -i -d @test_data.json -X POST http://localhost:5984/svg-charts-demo/_bulk_docsHTTP/1.1 100 ContinueHTTP/1.1 201 Created....Verify that 3000 documents are in the database.$ curl http://localhost:5984/svg-charts-demo/_all_docs?limit=0{"total_rows":3000,"offset":3000,"rows":[]}<>## Create and manage a design document with couchapp
[Design documents](http://books.couchdb.org/relax/design-documents/design-documents "design documents chapter on the Definitive Guide") are special couchdb documents that contain application code such as views and lists.[CouchApp](http://wiki.github.com/couchapp/couchapp) is a set of scripts that makes it easy to create and manage design documents.In most cases installing couchapp is matter of one command. If you have any problems or want to know more, visit [Managing Design Documents](http://books.couchdb.org/relax/example-app/design-documents) on the Definitive Guide.$ easy_install -U couchappThis command creates a new couchapp called svg-charts and installs it in couchdb$ couchapp generate svg-charts$ ls svg-charts/_attachments  _id  couchapp.json  lists  shows  updates  vendor  views$ couchapp push svg-charts http://localhost:5984/svg-charts-demo/[INFO] Visit your CouchApp here:http://localhost:5984/svg-charts-demo/_design/svg-charts/index.html<>## Write a simple view with map/reduce
This view will enable us to group the test data year, month or day and see the averagefor each group.``// map.js// key is array representing a date [year][month][day]// value is each doc amount field (a number)function(doc) {// dates are stored in the doc as 'yyyy-mm-dd'emit(doc.date.split('-'), doc.amount);}````// reduce.js// this reduce function returns an array of objects// {tot:total_value_for_group, count:elements_in_the_group}// clients can than do tot/count to get the average for the group// Keys are arrays [year][month][day], so count will always be 1 when group_level=3function(keys, values, rereduce) {if (rereduce) {var result = {tot:0, count:0};for (var idx in values) {result.tot += values[idx].tot;result.count += values[idx].count;}return result;}else {var result = {tot:sum(values), count:values.length};return result;}}``Update the design document and test the different groupings$ couchapp push svg-charts http://localhost:5984/svg-charts-demo/Call the view with group_level=1 to get the data grouped by year$ curl http://localhost:5984/svg-charts-demo/_design/svg-charts/_view/by_date?**group_level=1**{"rows":[{"key":**["2000"]**,"value":{"tot":4247068,"count":366}},...{"key":**["2008"]**,"value":{"tot":1529286,"count":78}}]}Call the view with roup_level=2 to get the data grouped by month$ curl http://localhost:5984/svg-charts-demo/_design/svg-charts/_view/by_date?**group_level=2**{"rows":[{"key":**["2000","01"]**,"value":{"tot":343578,"count":31}},{"key":**["2000","06"]**,"value":{"tot":345282,"count":30}},...Call the view with roup_level=3 to get the data grouped by day. As all the keys are different at the third level, this returns a single row for each document.$ curl -s http://localhost:5984/svg-charts-demo/_design/svg-charts/_view/by_date?**group_level=3**{"rows":[{"key":**["2000","01","01"]**,"value":{"tot":11896,"count":1}},{"key":**["2000","01","04"]**,"value":{"tot":11747,"count":1}},...Same as above but limiting the response to a range of days$ curl -s 'http://localhost:5984/svg-charts-demo/_design/svg-charts/_view/by_date?group_level=3&startkey=\**["2008","01","01"\]**&endkey=\**["2008","01","04"\]**'{"rows":[{"key":**["2008","01","01"]**,"value":{"tot":20050,"count":1}},{"key":["2008","01","02"],"value":{"tot":20019,"count":1}},{"key":["2008","01","03"],"value":{"tot":19974,"count":1}},{"key":**["2008","01","04"]**,"value":{"tot":19878,"count":1}}]}<>## Write a _list function and render the charts!
``function(head, req) {start({"headers":{"Content-Type" : "image/svg+xml"}});// some utility functions that print svg elementsfunction svg(width, height) {return &#x27;<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&#x27;+&#x27; style="fill:black"&#x27;+&#x27; width="&#x27;+width+&#x27;" height="&#x27;+height+&#x27;">\n&#x27;;}function line(x1, y1, x2, y2, color) {return &#x27;<line y1="&#x27;+y1+&#x27;" y2="&#x27;+y2+&#x27;" x1="&#x27;+x1+&#x27;" x2="&#x27;+x2+&#x27;" style="stroke-width: 0.2; stroke:&#x27;+color+&#x27;" />\n&#x27;;}function rect(x, y, width, height, color, fill) {return &#x27;<rect x="&#x27;+x+&#x27;" y="&#x27;+y+&#x27;" height="&#x27;+height+&#x27;" style="fill:&#x27;+fill+&#x27;; stroke:&#x27;+color+&#x27;" width="&#x27;+width+&#x27;" />\n&#x27;;}function text(x,y, text) {return &#x27;<text font-size="11" x="&#x27;+x+&#x27;" y="&#x27;+y+&#x27;" font-family="sans-serif">&#x27;+text+&#x27;</text>\n&#x27;;}// import query parametersvar x_size = req.query.width || 750;var y_size = req.query.height || 500;var level = parseInt(req.query.group_level);// find max and min values// collect values and labelsvar y_max = null;var y_min = null;var values = [];var labels = [];var count = 0;while(row = getRow()) {var value = Math.ceil(row.value.tot/row.value.count);if (y_max==null || value>y_max) { y_max=value; }if (y_min==null || value<y_min) { y_min=value; }values[count] = value;labels[count] = row.key.join(&#x27;-&#x27;);count++;}// calculate scalig factorsvar in_width = x_size-(2*pad);var in_height = y_size-(2*pad);var in_x_scale = in_width/count;var in_y_scale = in_height/(y_max-y_min);// free space surrounding the actual chartvar pad = Math.round(y_size/12);send(&#x27;<?xml version="1.0"?>&#x27;);send(svg(x_size, y_size));// background boxsend(rect(1,1, x_size, y_size, &#x27;#C6F1C7&#x27;, &#x27;#C6F1C7&#x27;));// chart container boxsend(rect(pad,pad, x_size-(2*pad), y_size-(2*pad), &#x27;black&#x27;,&#x27;white&#x27;));// draw labels and gridvar y_base = y_size - pad;var lastx = 0;var lasty = 0;for(var i=0; i<count; i++) {var x = pad+Math.round(i*in_x_scale);if (i==0 || x-lastx > (30+12*level)) {send(line(x, y_base+(pad/2), x, pad,&#x27;gray&#x27;));send(text(x+3, y_base + (pad/2), labels[i]));lastx = x;}var y = Math.round(y_base - ( (values[i]-y_min) * in_y_scale));if (i==0 || lasty-y > 15) {send(line(5, y, pad+in_width, y,&#x27;gray&#x27;));send(text(5, y-2, values[i]));lasty = y;}}// draw the actual chartsend(&#x27;<polyline points="&#x27;);for(var i=0; i<count; i++) {if (i>0) send(&#x27;,\n&#x27;);var x = pad+Math.round(i*in_x_scale);var y = Math.round(y_base - ( (values[i]-y_min) * in_y_scale));send( x + &#x27; &#x27; + y);}send(&#x27;" style="stroke:black; stroke-width: &#x27;+ (4-level) +&#x27;; fill: none;" />&#x27;);send(&#x27;&#x27;);}``<>Update couchapp, and execute the list function 'chart-line' against the view 'by_date'.Use different group_level settings, to obtain different charts:curl http://localhost:5984/svg-charts-demo/_design/svg-charts/\**_list/chart-line/by_date**?group_level=**3** > chart-line_level-3.svgcurl http://localhost:5984/svg-charts-demo/_design/\_list/chart-line/by_date?group_level=2 > chart-line_level-2.svgcurl http://localhost:5984/svg-charts-demo/_design/\_list/chart-line/by_date?group_level=1 > chart-line_level-1.svg[![](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-1.thumb.png)](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-1.svg)**group_level=1**yearly averages[svg](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-1.svg) - [png](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-1.png)[![](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-2.thumb.png)](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-2.svg)**group_level=2**monthly averages[svg](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-2.svg) - [png](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-2.png)[![](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-3.thumb.png)](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-3.svg)**group_level=3**daily values[svg](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-3.svg) - [png](http://caprazzi.net/demos/couchdb-charts-example/chart-line_level-3.png)Â <>## Concusions
It worked. I didn't expect to use a single list function for all grouping levels. I'm particularly happy of how it worked out, and even more consideringthat the whole thing is about 100 lines of code.The output isn't too nice, but I think I can be made presentable with under 500 lines of code and some effort.Couchdb is always a pleasure to work with and it goas a long way in minimizing "Time To something Done".
</simulation_length>
