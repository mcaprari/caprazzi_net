--- 
wordpress_id: 6
layout: post
title: "[C Testing] MinUnit - less is more"
date: 2008-09-08 11:48:00 +00:00
wordpress_url: http://caprazzi.net/?p=6
---
<div style="text-align: justify;"><span class="Apple-style-span" style="font-size:small;"><span class="Apple-style-span" style="font-family:'courier new';">- Can a whole framework be 3 lines long?</span></span><span class="Apple-style-span" style="font-weight: bold; "><span class="Apple-style-span" style="font-size:small;"><span class="Apple-style-span" style="font-family:'courier new';"> -</span></span></span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';"><br /></span></div><span class="Apple-style-span" style="font-family:'courier new';"><div style="text-align: justify;"><span class="Apple-style-span" style=" ;font-family:Georgia;"><span class="Apple-style-span" style=" ;font-family:'courier new';">The C project I'm </span>[<span class="Apple-style-span" style=" ;font-family:'courier new';">working on</span>](http://code.google.com/p/codalyze/wiki/CyzRgb)<span class="Apple-style-span" style=" ;font-family:'courier new';"> is quite small in <span class="blsp-spelling-error" id="SPELLING_ERROR_0">LOC</span> and files. It won't grow much as it's deployed on a chip with 4k program space and 256 <span class="Apple-style-span" style="font-weight: bold;">bytes</span> of ram.</span></span><br /></div></span><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';"><br /></span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';">No matter how small, test all your code. Always. Period.</span></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family: 'courier new';">Problem is, where to start?</span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';"><br /></span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';">Approaching unit testing may go down two different paths.</span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';"><br /></span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';">Write few functions with ifs and <span class="blsp-spelling-error" id="SPELLING_ERROR_1">printfs</span>, call them from a main(), execute and see. It's prone to code duplication and you'll soon start reinventing the wheel. You are paving your way to <span class="Apple-style-span" style="font-weight: bold;">a maintainability hell</span>. Anyway, It might work for small projects and is <span class="Apple-style-span" style="font-weight: bold;">very easy to get started</span> with. </span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';"><br /></span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';">Otherwise you can embrace a framework such as <span class="blsp-spelling-error" id="SPELLING_ERROR_2">CppUnit</span> o Check, learn it and start writing tests. You get more power and less duplication. You'll benefit from <span class="Apple-style-span" style="font-weight: bold;">standardization, automation and much more</span>. It's the best approach, except for the <span class="Apple-style-span" style="font-weight: bold;">steep learning curve</span>. Add that writing tests is not exciting nor easy, and you might end up being so <span class="Apple-style-span" style="font-weight: bold;">frustrated </span>that you'll never get your test suite done. </span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';"><br /></span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';">Introducing <span class="Apple-style-span" style="font-weight: bold;">the solution</span>: </span>[<span class="Apple-style-span" style="font-family:'courier new';"><span class="blsp-spelling-error" id="SPELLING_ERROR_3">MinUnit</span></span>](http://www.jera.com/techinfo/jtns/jtn002.html)<span class="Apple-style-span" style="font-family:'courier new';">, a unit testing framework in 3 lines of code (!!!!):</span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';"><br /></span></div><div><pre /><blockquote><div style="text-align: justify;"><span class="Apple-style-span" style=" ;font-family:'courier new';"> </span><span class="Apple-style-span" style="font-style: italic; "><span class="Apple-style-span" style=" ;font-family:'courier new';">/* file: <span class="blsp-spelling-error" id="SPELLING_ERROR_4">minunit</span>.h */</span></span><br /></div><span class="Apple-style-span" style="font-style: italic;" /><div style="text-align: justify;"><span class="Apple-style-span" style="  ;font-family:'courier new';font-size:16px;"> #define mu_assert(message, test) do { if (!(test)) return message; } while (0)</span><br /></div><span class="Apple-style-span" style="font-family:'courier new';"> #define mu_run_test(test) do { char *message = test(); tests_run++; \ </span><div style="text-align: justify;">)  <span class="blsp-spelling-error" id="SPELLING_ERROR_5">extern</span> int tests_run;<br /></div>                                if (message) return message; } while (<br /><div style="text-align: justify;">0<br /></div></blockquote></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';"><br /></span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';">(This kind of magic is why I really do miss macros in Java)</span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';"><br /></span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';">At least it is the solution for my small-scale project.</span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';"><br /></span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';">Just copy those few lines in a header file, include it and start writing tests. <span class="Apple-style-span" style="font-weight: bold;">It is really that easy</span>. And gone is your excuse for not testing. </span></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';">Really, <span class="Apple-style-span" style="font-weight: bold;">this might be all you need</span> even for a mid-sized project. <span class="blsp-spelling-corrected" id="SPELLING_ERROR_6">Especially</span> if you are introducing unit testing in an existing project, the jump start can really pay off.</span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';"><br /></span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';">One important feature of (some) bigger frameworks is that the test runner <span class="blsp-spelling-corrected" id="SPELLING_ERROR_7">executes</span> your test code in a separate address space. This way if your buggy code picks the wrong pointer, it won't bring down the test runner, but only that unit. The runner will report it as a failure and move on. Do that with <span class="blsp-spelling-error" id="SPELLING_ERROR_8">MinUnit</span> and probably you'll have no clue of what hit you.</span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';"><br /></span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';">Make no excuses, test-your-code.</span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';"><br /></span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';"><span class="Apple-style-span" style=" ;font-family:Georgia;" /></span><div style="text-align: justify; "><span class="Apple-style-span" style=" ;font-family:'courier new';">For the records, I modified it a little bit, adding a specialized assert:</span></div><div><div></div><blockquote><div style="text-align: justify; "><span class="Apple-style-span" style=" ;font-size:13px;"><span class="Apple-style-span" style=" ;font-family:'courier new';">#define mu_assert_<span class="blsp-spelling-error" id="SPELLING_ERROR_9">eq</span>(expected, actual) {\<br /></span></span></div><div style="text-align: justify; "><span class="Apple-tab-span" style="white-space: pre; "><span class="Apple-style-span" style=" ;font-size:13px;"><span class="Apple-style-span" style=" ;font-family:'courier new';"> </span></span></span><span class="Apple-style-span" style=" ;font-size:13px;"><span class="Apple-style-span" style=" ;font-family:'courier new';">int a = (expected); \</span></span></div><div style="text-align: justify; "><span class="Apple-tab-span" style="white-space: pre; "><span class="Apple-style-span" style=" ;font-size:13px;"><span class="Apple-style-span" style=" ;font-family:'courier new';"> </span></span></span><span class="Apple-style-span" style=" ;font-size:13px;"><span class="Apple-style-span" style=" ;font-family:'courier new';">int b = (actual); \</span></span></div><div style="text-align: justify; "><span class="Apple-tab-span" style="white-space: pre; "><span class="Apple-style-span" style=" ;font-size:13px;"><span class="Apple-style-span" style=" ;font-family:'courier new';"> </span></span></span><span class="Apple-style-span" style=" ;font-size:13px;"><span class="Apple-style-span" style=" ;font-family:'courier new';">do { if ((a) != (b)) { \</span></span></div><div style="text-align: justify; "><span class="Apple-tab-span" style="white-space: pre; "><span class="Apple-style-span" style=" ;font-size:13px;"><span class="Apple-style-span" style=" ;font-family:'courier new';">  </span></span></span><span class="Apple-style-span" style=" ;font-size:13px;"><span class="Apple-style-span" style=" ;font-family:'courier new';"><span class="blsp-spelling-error" id="SPELLING_ERROR_10">sprintf</span>(<span class="blsp-spelling-error" id="SPELLING_ERROR_11">minunit</span>_<span class="blsp-spelling-error" id="SPELLING_ERROR_12">msg</span>, "FAILURE %s:%d expected %d, got %u", __FILE__, __LINE__, a, b);\</span></span></div><div style="text-align: justify; "><span class="Apple-tab-span" style="white-space: pre; "><span class="Apple-style-span" style=" ;font-size:13px;"><span class="Apple-style-span" style=" ;font-family:'courier new';">  </span></span></span><span class="Apple-style-span" style=" ;font-size:13px;"><span class="Apple-style-span" style=" ;font-family:'courier new';">return <span class="blsp-spelling-error" id="SPELLING_ERROR_13">minunit</span>_<span class="blsp-spelling-error" id="SPELLING_ERROR_14">msg</span>; }; \</span></span></div><div style="text-align: justify; "><span class="Apple-tab-span" style="white-space: pre; "><span class="Apple-style-span" style=" ;font-size:13px;"><span class="Apple-style-span" style=" ;font-family:'courier new';"> </span></span></span><span class="Apple-style-span" style=" ;font-size:13px;"><span class="Apple-style-span" style=" ;font-family:'courier new';">} while(0); }</span></span></div></blockquote></div></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';"><br /></span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';">There is a complete example on the [project page](http://www.jera.com/techinfo/jtns/jtn002.html) or have a look at a real world example: [test_ring_buffer.h](http://code.google.com/p/codalyze/source/browse/cyz_rgb/trunk/test/test_ring_buffer.h) and [test.c](http://code.google.com/p/codalyze/source/browse/cyz_rgb/trunk/test/test.c)</span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';"><br /></span></div><div style="text-align: justify;"><span class="Apple-style-span" style="font-family:'courier new';">Matteo</span></div><div style="text-align: justify;"><br /></div>
