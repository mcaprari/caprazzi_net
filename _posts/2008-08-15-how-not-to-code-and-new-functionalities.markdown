--- 
wordpress_id: 4
layout: post
title: How (not) to code and new functionalities
date: 2008-08-15 11:43:00 +00:00
wordpress_url: http://caprazzi.net/?p=4
---
<div style="text-align: justify;"><span style="font-weight: bold;font-size:130%;"><span style="font-family:courier new;"><br /><span style="font-family:verdana;">How (not) to write code for a small chip</span></span></span><br /><br /><span style="font-family:courier new;">The project has two main set of procedures for color control and commands execution. Loving encapsulation and separation of concerns, I built two </span>structs<span style="font-family:courier new;"> with function pointers, to </span>mimic objects:<br /><br /><span style="font-family:courier new;"> <span style="font-style: italic;">typedef struct CYZ_CMD {</span></span><br /><pre style="font-family:courier new;"><span style="font-style: italic;"> unsigned char rcv_cmd_buf[8];</span><br /><span style="font-style: italic;"> unsigned char rcv_cmd_buf_cnt;</span><br /><span style="font-style: italic;"> unsigned char rcv_cmd_len;</span><br /><span style="font-style: italic;"> Cyz_rgb* cyz_rgb;</span><br /><span style="font-style: italic;"> void (*execute)(void* this, unsigned char* buf);</span><br /><span style="font-style: italic;"> void (*receive_one_byte)(void* this, unsigned char rcv);</span><br /><span style="font-style: italic;">} Cyz_cmd;</span><br /></pre><div style="text-align: justify;"><span style="font-family:courier new;"> then allocating an "instance" with malloc, doing some initialization work and finally executing "methods" with</span><br /></div><pre><span style="font-family:courier new;"><span class="oldrm"><span style="font-style: italic;">cyz_cmd->execute(cyz_cmd, play);</span><br /><br /></span></span></pre><div style="text-align: justify;"><span class="oldrm" style="font-family:courier new;">Smart you say?</span><span class="oldrm"><span style="font-family:courier new;"> <span style="font-weight: bold;">Not at all</span>. I only ended up <span style="font-weight: bold;">eating all available memory</span> (a flattering 256 Bytes).</span></span><span class="oldrm"><span style="font-family:courier new;"> I reverted to global variables and functions, dropped all the dynamic memory thing and learnt how not write</span></span><span class="oldrm"><span style="font-family:courier new;"> code for an embedded system. True, neat and clean code is more maintainable, but I was</span></span><span class="oldrm"><span style="font-family:courier new;"> spending precious memory to buy only an apparent advantage.</span></span><b><b class="oldrm"> </b></b><br /><span style="font-family:monospace;"><span style="font-weight: bold;"><br /></span></span></div><div style="text-align: justify;"><span class="oldrm"><span style="font-size:100%;"><span style="font-family:courier new;">Adding new commands and functionalities</span></span></span><span style="font-size:100%;"><span class="oldrm"><span style="font-family:courier new;"> will further reduce available memory: I'll probably </span></span></span><span style="font-size:100%;"><span class="oldrm"><span style="font-family:courier new;">learn some neat tricks. Can't wait...</span></span></span><br /><span style="font-size:100%;"><span class="oldrm"></span></span></div><br /><span style="font-weight: bold;font-family:courier new;font-size:130%;">Added some commands (only in svn head)</span><br /><br /><span style="font-weight: bold;font-family:courier new;font-size:130%;">'W' Write script line</span><br /><br /><span style="font-family:courier new;">Script 0 can be modified and up to </span><span style="font-weight: bold;font-family:courier new;">10</span><span style="font-family:courier new;"> lines added and executed. With some limitations:</span><br /></div>1. line duration is ignored
2. script lines only support fade to rgb and go to rgb
3. script is not persisted and will disappear at next power off
4. script number is ignored, can only write script 0 (as in original blinkm)
5. <br />
<div style="text-align: justify;"><span style="font-weight: bold;font-family:courier new;font-size:130%;">'p' Play script</span><br /><br /><span style="font-family:courier new;">After writing a script with 'W', it can be xecuted with 'p'. Only applies to script 0</span><br /><br /><br /><span style="font-weight: bold;font-family:courier new;font-size:130%;">'o' Stop script</span><br /><br /><span style="font-family:courier new;">No limitations here :)</span><br /><br />[See](http://code.google.com/p/codalyze/wiki/CyzRgb)<span style="font-family:courier new;"> the project page for details.</span><br /><br /><br /><br /><br /><span style="font-family:courier new;">Matteo</span></div>
